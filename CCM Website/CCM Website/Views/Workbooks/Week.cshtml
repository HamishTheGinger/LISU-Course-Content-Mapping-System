@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CCM_Website.ViewModels.WeekDetailsViewModel
@{
    ViewData["Title"] = $"{@Model.Week!.Workbook.CourseCode ?? Model.Week.Workbook.CourseName} - Week {@Model.Week.WeekNumber}";
    ViewData["LearningPlatform"] = $"{@Model.Week.Workbook.LearningPlatform.PlatformName}";
    var learningLocationCounts = ViewBag.locationCount as Dictionary<string, int>;
    var taskProgressCounts = ViewBag.progressCount as Dictionary<string, int>;
    var learningTypes = ViewData["LearningTypes"] as List<LearningType>;
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item"><a asp-controller="Workbooks" asp-action="Index">Workbooks</a></li>
        <li class="breadcrumb-item"><a asp-area="" asp-controller="Workbooks" asp-action="Details" asp-route-id="@Model.Week.WorkbookId">Workbook Details</a></li>
        <li class="breadcrumb-item active" aria-current="page">Week @Model.Week.WeekNumber</li>
    </ol>
    <hr/>
</nav>

<div class="container-fluid">
    <div class="row my-3 align-items-start">
        <div class="col-md-10">
            <h1 class="text-wrap">@Model.Week.Workbook.CourseName</h1>
            <h4 class="text-wrap">@Model.Week.Workbook.CourseLead</h4>
        </div>
        <div class="col-md-2 d-flex justify-content-center ">
            <a asp-controller="Workbooks" asp-action="CreateActivity" asp-route-id="@Model.Week.WorkbookId" asp-route-weekId="@Model.Week.WeekId" class="btn btn-success ">
                Create Activity
            </a>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <div class="table-responsive mb-3">
                <table id="weekTable"class="table table-bordered">
                    <thead>
                    <tr>
                        <th class ="bg-week-table text-white text-center" id="weekTableHeading">Week @Model.Week.WeekNumber</th>
                    </tr>
                    <tr class="bg-week-table text-white text-center">
                        <th>@Html.DisplayName("Task Order")</th>
                        <th>@Html.DisplayName("Staff Responsible")</th>
                        <th>@Html.DisplayName("Title")</th>
                        <th>@Html.DisplayName("Learning Activity")</th>
                        <th>@Html.DisplayName("Learning Type")</th>
                        <th>@Html.DisplayName("Time (Hrs:Mins)")</th>
                        <th>@Html.DisplayName("Task Status")</th>
                        <th>@Html.DisplayName("Activity Location")</th>
                        <th>@Html.DisplayName("Learning Approach")</th>
                        <th><btn class="btn btn-primary d-block" id="changeOrder">Change Order</btn>
                            <btn class="btn btn-success d-none" id="saveOrder">Save Changes</btn>
                        </th>
                        <th>Edit Activity</th>

                    </tr>
                    </thead>
                    <tbody>
      
                    </tbody>
                </table>
            </div>

            <div class="row mb-10 justify-content-around">
                <div id="legend" class="d-none">
                    <table class="table table-bordered table-responsive">
                        <thead>
                            <tr><th>Legend</th></tr>
                        </thead>
                        <tbody>
                        <tr><td id="Acquisition_legend">Acquisition</td><td>Forums,Lectures,Live Webinar, Multiple-Choice Questions(MCQ), Podcasts, Q&A Walls, Readings, Videos</td></tr>
                        <tr><td id="Collaboration_legend">Collaboration</td><td>Collaborative Docs, Crowd Sourcing, Digital Artifact, Mind Mapping, Peer Review, Podcast, Shared Resource, Social Annotation, Software Dev, Video</td></tr>
                        <tr><td id="Discussion_legend">Discussion</td><td>Debates, Engaging in Dialogue, Group Discussions, Microsoft Teams, Moodle Forum, Social Annotation, Social Networking, Twitter, Webinar, Zoom </td></tr>
                        <tr><td id="Investigation_legend">Investigation</td><td>Analysing Data, Desk Research, Research using Databases, Web Search</td></tr>
                        <tr><td id="Practice_legend">Practice</td><td>Assessment Prep, Case Studies, Drafting a Paper, Multiple-Choice Questions(MCQ), Reflective Tasks, Scenarios</td></tr>
                        <tr><td id="Production_legend">Production</td><td>Annotated Bibliography, Assessment, Blogging, Case Study, Course Doc FAQ, ePortfolios, Peer Review, Podcast, Reflection, Report, Software Dev, Video, Wiki</td></tr>
                        <tr><td id="Assessment_legend" class="text-white">Assessment</td><td>Graded summative assignment that is a dedicated student activity as outlined in Coursera and the UofG PIP form</td></tr>
                        </tbody>
                    </table>

                </div>

                <div class="col-md-6 d-flex flex-column justify-content-start align-items-center table-responsive">
                    <button class="btn btn-primary m-3 rounded-pill " id="lt_table_hide"> <span id="arrow_stats">▼</span> Statistics</button>

                    <div class="d-flex flex-column justify-content-center align-items-center">
                        <table id="stats_table" class="table table-bordered text-center position-sticky">
                            <thead>
                            <tr>
                                <th colspan="4" class ="text-white bg-stats-table">Statistics</th>
                            </tr>
                            <tr class ="text-white bg-stats-table">
                                <th>Learning Type</th>
                                <th>Allocation</th>
                                <th>Status</th>
                                <th>Tasks</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td id="Acquisition"></td>
                                <td id="Acquisition_data"></td>
                                <td class="bg-red">Unassigned</td>
                                <td id="Unassigned"></td>
                            </tr>
                            <tr>
                                <td id="Collaboration"></td>
                                <td id="Collaboration_data"></td>
                                <td class="bg-amber">In Progress</td>
                                <td id="InProgress"></td>
                            </tr>
                            <tr>
                                <td id="Discussion"></td>
                                <td id="Discussion_data"></td>
                                <td class="bg-green">Completed</td>
                                <td id="Completed"></td>
                            </tr>
                            <tr>
                                <td id="Investigation"></td>
                                <td id="Investigation_data"></td>
                                <td>Total Tasks</td>
                                <td id="Total" class="bg-stats-total"></td>
                            </tr>
                            <tr>
                                <td id="Practice"></td>
                                <td id="Practice_data"></td>
                                <td></td>
                                <td></td>
                            </tr>
                            <tr>
                                <td id="Production"></td>
                                <td id="Production_data"></td>
                                <th class="bg-stats-table text-white">Activity Location</th>
                                <th class="bg-stats-table text-white">Total</th>
                            </tr>
                            <tr>
                                <td id="Assessment"></td>
                                <td id="Assessment_data"></td>
                                <td class="bg-on-campus">On Campus</td>
                                <td id="OnCampus"></td>
                            </tr> 
                            <tr>
                                <td class="fw-bold">Total Time</td>
                                <td id="TotalTime" class="fw-bold bg-stats-total"></td>
                                <td class="bg-remote">Remote (Home)</td>
                                <td id="Remote"></td>
                            </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
                <div class="col-md-6 d-flex flex-column justify-content-start align-items-center">
                    <button class="btn btn-primary m-3 rounded-pill" id="lt_chart_hide"> <span id="arrow_chart">▼</span> Chart</button>

                    <div class="d-flex flex-column justify-content-center align-items-center">
                        <div id="lt_chart"></div>
                        <div id="lt_chart_key"></div>
                        <div id="lt_chart_details" class="minh-50"></div>
                    </div>

                </div>
            </div>

            <div class="text-center d-flex justify-content-center">
                <button class="btn btn-primary m-3 rounded-pill" id="legend_btn"> <span id="arrow_legend">▲</span> Legend</button>
            </div>

        </div>


        <div class="col-md-2 d-flex flex-column">
            @foreach (var week in Model.Week?.Workbook?.Weeks?.OrderBy(w => w.WeekNumber) ?? Enumerable.Empty<Week>())
            {
                <div class="d-flex justify-content-center">
                    @if (Model.Week?.WeekNumber != week.WeekNumber) {
                        <a class="btn btn-primary mb-2 rounded-pill bg-secondary" asp-action="Week" asp-route-id="@week.WeekId">
                            Week @week.WeekNumber
                        </a>
                    }
                    else {
                        <a class="btn btn-primary mb-2 rounded-pill bg-gray-600 border border-gray-600" >
                            Week @week.WeekNumber
                        </a>
                    }

                </div>
            }
        </div>
    </div>


</div>
<script>
    
    //Data for the main table
    var weekTableBody = document.getElementById('weekTable').querySelector('tbody');
    var weekTableData = [];
    var isOrderingActive = false;
    var changeOrderDisabled = false;

    @foreach (var item in Model.ActivitiesList ?? new List<WeekActivities>())
    {
    <text>
        weekTableData.push({
            id: "@Html.Raw(item.WeekActivityId)",
            taskOrder : "@Html.Raw(item.TaskOrder)",
            staffResponsible: "@Html.Raw(item.TaskStaff)",
            title: "@Html.Raw(item.TaskTitle)",
            learningActivity: "@Html.Raw(item.Activities.ActivityName)",
            learningType: "@Html.Raw(item.LearningType.LearningTypeName)",
            time: "@Html.Raw(item.TaskTime.ToString(@"hh\:mm"))",
            status: "@Html.Raw(item.TasksStatus.StatusName)",
            activityLocation: "@Html.Raw(item.TaskLocation.LocationName)",
            approach: "@Html.Raw(item.TaskApproach.ApproachName)"
        });
    </text>
    }

    @if (!(Model.ActivitiesList?.Any() ?? false))
    {
    <text>
    weekTableData.push({
        id: "N/A",
        taskOrder : "N/A",
        staffResponsible: "N/A",
        title: "N/A",
        learningActivity: "N/A",
        learningType: "N/A",
        time: "N/A",
        status: "N/A",
        activityLocation:"N/A",
        approach: "N/A"
    });
    </text>
    }
    
    //Populating the heading for the table
    var tableHeading = document.getElementById('weekTableHeading')
    tableHeading.colSpan = Object.keys(weekTableData[0]).length + 1;
    
    //Populating the table from the data
    function renderTable() {
    
        weekTableBody.innerHTML = '';
        weekTableData.forEach(function(rowData, index) {
            var row = document.createElement('tr');
            for (var key in rowData) {
                if (key !== "id") {
                    var cell = document.createElement('td');
                    cell.textContent = rowData[key];
                    row.appendChild(cell);
                }
            }

            var actionCell = document.createElement('td');
            var upButton = document.createElement('button');
            upButton.textContent = "▲";
            upButton.disabled = index === 0;
            upButton.style.background = "none";
            upButton.style.border = "none";
            upButton.id = `upButton-${index}`;

            upButton.addEventListener("mouseover", function() {
                if (!upButton.disabled) {
                    upButton.style.color = "#0d6efd";
                }
            });
            upButton.addEventListener("mouseout", function() {
                upButton.style.color = "";
            });

            var downButton = document.createElement('button');
            downButton.textContent = "▼";
            downButton.style.background = "none";
            downButton.style.border = "none";
            downButton.disabled = index === weekTableData.length - 1;
            downButton.id = `downButton-${index}`;

            if (isOrderingActive) {
                upButton.style.display = "block";
                downButton.style.display = "block";
            } else {
                upButton.style.display = "none";
                downButton.style.display = "none";
            }
            
            downButton.addEventListener("mouseover", function() {
                if (!downButton.disabled) {
                    downButton.style.color = "#0d6efd";
                }
            });
            downButton.addEventListener("mouseout", function() {
                downButton.style.color = "";
            });

            upButton.onclick = function() {
                moveRow(index, -1);
                setTimeout(() => {
                    refocusArrows(index - 1, "up");
                }, 0);
            };

            downButton.onclick = function() {
                moveRow(index, 1);
                setTimeout(() => {
                    refocusArrows(index + 1, "down");
                }, 0);
            };

            actionCell.appendChild(upButton);
            actionCell.appendChild(downButton);
            actionCell.classList.add("d-flex", "flex-column","gap-4");
            actionCell.style.border = "none";
            row.appendChild(actionCell);

            var editCell = document.createElement('td');
            if(rowData.id !== "N/A"){
                var editLink = document.createElement('a');
                editLink.textContent = "Edit Activity";
                editLink.href = `/Workbooks/EditActivity/${rowData.id}`;
                editLink.className = "d-flex justify-content-center btn btn-primary";
                editCell.appendChild(editLink);
            }else{
                editCell.textContent = "N/A";
                var changeOrderButton = document.getElementById("changeOrder");
                changeOrderButton.className = "btn btn-primary d-block bg-gray-600 border border-gray-600";
                changeOrderDisabled = true;
            }
            row.appendChild(editCell);
            weekTableBody.appendChild(row);
        });
    }

    //Function to show changes to the order made by the user
    function moveRow(index, direction) {
        var newIndex = index + direction;
        var temp = weekTableData[index];
        weekTableData[index] = weekTableData[newIndex];
        weekTableData[newIndex] = temp;
        renderTable();
    }

    renderTable();
    var changeOrderButton = document.getElementById("changeOrder");
    var saveOrderButton = document.getElementById("saveOrder");
    
    if (!changeOrderDisabled){
        changeOrderButton.onclick = function() {
            isOrderingActive = true;
            saveOrderButton.className = "btn btn-success d-block";
            changeOrderButton.className = "btn btn-primary d-none";

            for (let i = 0; i < weekTableData.length; i++) {
                let buttonD = document.getElementById(`downButton-` + i);
                let buttonU = document.getElementById(`upButton-` + i);
                if (buttonD && buttonU) {
                    buttonD.style.display = "block";
                    buttonU.style.display = "block";
                }
            }
        };

        saveOrderButton.onclick = function() {
            isOrderingActive = false;
            changeOrderButton.className = "btn btn-primary d-block";
            saveOrderButton.className = "btn btn-success d-none";

            for (let i = 0; i < weekTableData.length; i++) {
                let buttonD = document.getElementById(`downButton-` + i);
                let buttonU = document.getElementById(`upButton-` + i);
                if (buttonD && buttonU) {
                    buttonD.style.display = "none";
                    buttonU.style.display = "none";
                }
            }
        saveOrder();
        };
    }



    //Stats table data 
    var statsData = [];
    var unassigned = @Html.Raw(Model.ActivitiesList?.Count(a => a.TasksStatus.StatusName == "Unassigned"));
    var inProgress = @Html.Raw(Model.ActivitiesList?.Count(a => a.TasksStatus.StatusName == "In-Progress"));
    var completed = @Html.Raw(Model.ActivitiesList?.Count(a => a.TasksStatus.StatusName == "Completed"));
    var onCampus = @Html.Raw(Model.ActivitiesList?.Count(a => a.TaskLocation.LocationName == "On Campus"));
    var remote = @Html.Raw(Model.ActivitiesList?.Count(a => a.TaskLocation.LocationName == "Remote (Home)"));
    var total = unassigned + inProgress + completed;
    @{
        double totalTime = Model.ActivitiesList?
            .Select(a => (double?)a.TaskTime.TotalMinutes)
            .Sum() ?? 0;
    }
    
    const unassignedCell = document.getElementById("Unassigned")
    unassignedCell.textContent = unassigned;
    const inProgressCell = document.getElementById("InProgress")
    inProgressCell.textContent = inProgress;
    const completedCell = document.getElementById("Completed")
    completedCell.textContent = completed;
    const totalCell = document.getElementById("Total")
    totalCell.textContent = total;
    const onCampusCell = document.getElementById("OnCampus")
    onCampusCell.textContent = onCampus;
    const remoteCell = document.getElementById("Remote")
    remoteCell.textContent = remote;
    const totalTimeCell = document.getElementById("TotalTime")
    let hoursTotal = Math.floor(@totalTime/60);
    let minutesTotal = @totalTime%60;
    totalTimeCell.textContent = `${hoursTotal.toString().padStart(2, '0')}:${minutesTotal.toString().padStart(2, '0')}`;

    @{
        foreach (var type in learningTypes ?? Enumerable.Empty<LearningType>())
        {
            var time = Model.ActivitiesList?
                .Where(a => a.LearningType.LearningTypeName == type.LearningTypeName)
                .Select(a => (double?)a.TaskTime.TotalMinutes)
                .Sum() ?? 0; 
            
            <text>
                statsData.push({
                    label: "@Html.Raw(type.LearningTypeName)", 
                    time: @Html.Raw(time),
                    color: "@Html.Raw(type.LearningTypeColour)",
                    textColor: "@Html.Raw(type.LearningTypeTextColour)"
                });
            </text>
        }
    }

    //populating table
    statsData.forEach(item => {
        const labelId = item.label;
        const cell = document.getElementById(labelId);
        const cellData = document.getElementById(labelId + "_data");
        if (cell) {
            cell.textContent = item.label;
            cell.style.backgroundColor = item.color;
            cell.style.color = item.textColor;
        }
        if (cellData) {
            let hours = Math.floor(item.time/60);
            let minutes = item.time%60;
            cellData.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
        }
    });

    //button toggle functions
    document.getElementById("lt_table_hide").addEventListener("click", toggleStatsTable);
    document.getElementById("lt_chart_hide").addEventListener("click", togglePieChart);
    document.getElementById("legend_btn").addEventListener("click", toggleLegend);

    function togglePieChart() {
        const chart = document.getElementById("lt_chart");
        const key = document.getElementById("lt_chart_key");
        const arrow = document.getElementById("arrow_chart");
        chart.classList.toggle("d-none")
        chart.classList.toggle("d-block")
        key.classList.toggle("d-none")
        key.classList.toggle("d-block")
        
        if (chart.classList.contains("d-none")) {
            arrow.innerHTML = "▲";
            refocusButton("lt_chart");
        } else {
            arrow.innerHTML = "▼";
        }
    }

    function toggleLegend() {
        const chart = document.getElementById("lt_chart");
        const table = document.getElementById("stats_table");
        const key = document.getElementById("lt_chart_key");
        const legend = document.getElementById("legend");
        const arrow = document.getElementById("arrow_legend");
        const buttonChart = document.getElementById("lt_chart_hide");
        const buttonTable = document.getElementById("lt_table_hide");

        statsData.forEach(item => {
            const legend_colour = document.getElementById(item.label + "_legend");
            legend_colour.style.backgroundColor = item.color;
        });

        legend.classList.toggle("d-none")
        legend.classList.toggle("d-block")
        chart.className = "d-none";
        key.className = "d-none";
        table.className = "d-none";
        buttonChart.className = "d-none";
        buttonTable.className = "d-none";

        if (legend.classList.contains("d-block")) {
            arrow.innerHTML = "▼";
            refocusButton("legend");

        } else {
            arrow.innerHTML = "▲";
            buttonChart.className = "d-block";
            buttonTable.className = "d-block";
        }
    }

    function toggleStatsTable() {
        const table = document.getElementById("stats_table");
        const arrow = document.getElementById("arrow_stats");
        table.classList.toggle("d-none")
        table.classList.toggle("d-block")

        if (table.classList.contains("d-none")) {
            arrow.innerHTML = "▲";
            refocusButton("stats_table");
        } else {
            arrow.innerHTML = "▼";
        }
    }
    
    //function to call controller to save new taskOrder to the DB
    function saveOrder() {
        var activities = {};

        for (let i = 0; i < weekTableData.length; i++) {
            activities[weekTableData[i].id] = i+1;
        }


        fetch('/Workbooks/ChangeActivityOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(activities),  
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
    }
    
    //functions to focus the screen on the related elements
    function refocusArrows(newIndex, direction) {

        if (direction === "up") {
            let upButton = document.getElementById(`upButton-${newIndex}`);
            upButton.focus();
            upButton.scrollIntoView({ behavior: "smooth", block: "center" });
        } else if (direction === "down") {
            let downButton = document.getElementById(`downButton-${newIndex}`);
            downButton.focus();
            downButton.scrollIntoView({ behavior: "smooth", block: "center" });
        }
    }

    function refocusButton(id) {

        let content = document.getElementById(`${id}`);
        content.focus();
        content.scrollIntoView({ behavior: "smooth", block: "center" });
    }

    // Pie chart vector
    var pieMargin = 20;
    var pieWidth = Math.max(window.innerWidth * 0.2, 230);
    var pieHeight = Math.max(window.innerWidth * 0.2, 230);
    var pieRadius = Math.max(pieWidth, pieHeight) / 2 - pieMargin;

    var svg = d3.select("#lt_chart")
        .append("svg")
        .attr("width", pieWidth)
        .attr("height", pieHeight)
        .append("g")
        .attr("transform", "translate(" + pieWidth / 2 + "," + pieHeight / 2 + ")");

    var color = d3.scaleOrdinal()
        .domain(statsData.map(d => d.label))
        .range(statsData.map(d => d.color));

    var pie = d3.pie()
        .value(function(d) { return d.time; });

    var arc = d3.arc()
        .innerRadius(0)
        .outerRadius(pieRadius);

    // Draw Pie Slices
    svg.selectAll('path')
        .data(pie(statsData))
        .enter()
        .append('path')
        .attr('d', arc)
        .attr('fill', function(d) { return color(d.data.label); })
        .attr("stroke", "black")
        .style("stroke-width", "0px") 
        .style("opacity", 1)
        .on("mouseover", function (event, d) {
            displayDetails(d.data);
        })
        .on("mouseout", function () {
            hideDetails();
        });

    const key = d3.select("#lt_chart_key")
        .append("div")
        .attr("id", "key")
        .style("display", "flex")
        .style("flex-direction", "column")
        .style("margin-left", "20px")
        .style("margin-top", "20px");

    key.selectAll("div")
        .data(statsData)
        .enter()
        .append("div")
        .style("display", "flex")
        .style("align-items", "center")
        .style("margin-bottom", "5px")
        .html(function(d) {
            return `
                <div style="width: 12px; height: 12px; background-color: ${d.color}; 
                    margin-right: 8px; border: 1px solid black;"></div>
                ${d.label}
            `;
    });

    window.addEventListener("resize", function () {
        pieWidth = Math.max(window.innerWidth * 0.2, 230);
        pieHeight = Math.max(window.innerWidth * 0.2, 230);
        pieRadius = Math.max(pieWidth, pieHeight) / 2 - pieMargin;

        d3.select("svg")
            .attr("width", pieWidth)
            .attr("height", pieHeight);

        svg.attr("transform", "translate(" + pieWidth / 2 + "," + pieHeight / 2 + ")");
        arc.outerRadius(pieRadius);
        svg.selectAll("path").attr("d", arc);
    });
    
    //percentage of time displayed when the user hovers over the pie chart
    function displayDetails(d) {
        var percentage = @Html.Raw(totalTime) > 0 ? ((d.time / @Html.Raw(totalTime)) * 100).toFixed(2) : 0;
        let detailsDiv = d3.select("#lt_chart_details");
        detailsDiv.html(`<strong>${d.label}</strong>: (${percentage}%)`);
    }

    function hideDetails() {
        let detailsDiv = d3.select("#lt_chart_details");
        detailsDiv.html('');
    }

</script>












