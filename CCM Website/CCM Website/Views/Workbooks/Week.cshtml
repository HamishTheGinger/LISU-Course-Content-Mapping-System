@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IAuthorizationService AuthorizationService
@model CCM_Website.ViewModels.WeekDetailsViewModel
@{
    ViewData["Title"] = $"{@Model.Week!.Workbook.CourseCode ?? Model.Week.Workbook.CourseName} - Week {@Model.Week.WeekNumber}";
    ViewData["LearningPlatform"] = $"{@Model.Week.Workbook.LearningPlatform.PlatformName}";

    var learningTypes = ViewData["LearningTypes"] as List<LearningType>;
}

@{
    var isAuthorised = (await AuthorizationService.AuthorizeAsync(User, Model.Week.Workbook, "CanAccessResource")).Succeeded;
}
<script>
    // This is needed to convert from Azure/Razor to Javascript. Hence the duplicated variable
    var isUserAuthorised = @Json.Serialize(isAuthorised);
</script>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li><button class="btn btn-primary me-3" onclick="history.back();">Back</button></li>
        <div class="d-flex m-2">
        <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item"><a asp-controller="Workbooks" asp-action="Index">Workbooks</a></li>
        <li class="breadcrumb-item"><a asp-area="" asp-controller="Workbooks" asp-action="Details" asp-route-id="@Model.Week.WorkbookId">Workbook Details</a></li>
        <li class="breadcrumb-item active" aria-current="page">Week @Model.Week.WeekNumber</li>
        </div>
    </ol>
    <hr/>
</nav>

<div class="container-fluid">
    <div class="row my-3 align-items-start">
        <div class="col-md-10 mb-3">
            <h1 class="text-wrap">@Model.Week.Workbook.CourseName</h1>
            <h4 class="text-wrap">@Model.Week.Workbook.CourseLead</h4>
        </div>
        <div class="col-md-2 d-flex justify-content-center">
            @if ((await AuthorizationService.AuthorizeAsync(User, Model.Week.Workbook, "CanAccessResource")).Succeeded)
            {
                <a asp-controller="Workbooks" asp-action="CreateActivity" asp-route-id="@Model.Week.WorkbookId" asp-route-weekId="@Model.Week.WeekId" class="btn btn-success">
                    Create Activity
                </a>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <div class="table-responsive mb-3">
                <table id="weekTable" class="table table-bordered">
                    <thead>
                    <tr>
                        <th class ="bg-week-table text-white text-center" id="weekTableHeading">Week @Model.Week.WeekNumber</th>
                    </tr>
                    <tr class="bg-week-table text-white text-center">
                        <th>
                            @Html.DisplayName("Task Order")
                            <a id="changeOrderTask" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Staff Responsible")
                            <a id="changeOrderStaff" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Title")
                            <a id="changeOrderTitle" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Learning Activity")
                            <a id="changeOrderActivity" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Learning Type")
                            <a id="changeOrderType" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Time (Hrs:Mins)")
                            <a id="changeOrderTime" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Task Status")
                            <a id="changeOrderStatus" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Activity Location")
                            <a id="changeOrderLocation" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>
                        <th>
                            @Html.DisplayName("Learning Approach")
                            <a id="changeOrderApproach" class="d-block text-white text-decoration-none border-0 bg-transparent"> ▲</a>
                        </th>


                        @if ((await AuthorizationService.AuthorizeAsync(User, Model.Week.Workbook, "CanAccessResource")).Succeeded)
                            {
                                <th><btn class="btn btn-primary d-block" id="changeOrder">Change Order</btn>
                                    <btn class="btn btn-success d-none" id="saveOrder">Save Changes</btn>
                                </th>
                                <th>Edit Activity</th>
                            }

                    </tr>
                    </thead>
                    <tbody>
      
                    </tbody>
                </table>
            </div>

            <div class="row mb-10 justify-content-around">
                    <div class="row-md-6 d-flex justify-content-center align-items-center">
                        <table id="attributes_table" class="table table-bordered text-center position-sticky w-auto">
                            <thead>
                                <tr class="bg-week-table text-white">
                                    <th colspan = "2" >Week Graduate Attribute(s)
                                        @if ((await AuthorizationService.AuthorizeAsync(User, Model.Week.Workbook, "CanAccessResource")).Succeeded)
                                        {
                                            <a asp-action="AssignAttributes" asp-controller="Workbooks" asp-route-weekId="@Model.Week.WeekId" class="btn btn-primary btn-sm rounded-pill m-1 text-white">
                                                Assign
                                            </a>
                                        }
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var counter = 1;
                                }


                                @{
                                    System.Diagnostics.Debug.Assert(Model.Week.WeekGraduateAttributes != null, "Model.Week.WeekGraduateAttributes != null");
                                }
                                @{
                                    if (Model.Week.WeekGraduateAttributes.Count > 0)
                                    {
                                        foreach (var graduateAttribute in Model.Week.WeekGraduateAttributes)
                                        {
                                            <tr>
                                                <td class="bg-thistle text-white">Graduate Attribute @counter</td>
                                                <td>@graduateAttribute.GraduateAttribute.AttributeName</td>
                                            </tr>

                                            counter++;
                                        }

                                    }
                                    else
                                    {
                                        <tr>
                                            <td>No Graduate Attributes</td>
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                </div>
                
                <div id="legend" class="d-none">
                    <table class="table table-bordered table-responsive" id="legendTable">
                        <thead>
                            <tr><th>Legend</th></tr>
                        </thead>
                        <tbody>
                    
                        </tbody>
                    </table>

                </div>

                <div class="col-md-6 d-flex flex-column justify-content-start align-items-center table-responsive">
                    <button class="btn btn-primary m-3 rounded-pill " id="lt_table_hide"> <span id="arrow_stats">▼</span> Statistics</button>
                    

                    <div class="d-flex flex-column justify-content-between align-items-center">
                        <table id="statsTable" class="table table-bordered text-center position-sticky d-block">
                            <thead>
                            <th colspan="4" class="text-white bg-stats-table">Statistics</th>
                            </thead>
                            <tbody>
                            <td>
                                <table id="statsLearningActivityTable" class="table table-bordered text-center position-sticky d-block">
                                    <thead class="text-white bg-stats-table">
                                        <th>Learning Type</th>
                                        <th>Allocation</th>
                                    </thead>
                                </table>
                            </td>
                            <td>
                                <table id="statsTasksTable" class="table table-bordered text-center position-sticky d-block">
                                </table>
                            </td>
                            </tbody>
                        </table>
                    </div>
                    


                </div>
                


                <div class="col-md-6 d-flex flex-column justify-content-start align-items-center">
                    <button class="btn btn-primary m-3 rounded-pill d-block" id="lt_chart_hide"> <span id="arrow_chart">▼</span> Chart</button>

                    <div class="d-flex flex-column justify-content-center align-items-center">
                        <div id="lt_chart"></div>
                        <div id="lt_chart_key"></div>
                        <div id="lt_chart_details" class="minh-50"></div>
                    </div>

                </div>
            </div>

            <div class="text-center d-flex justify-content-center">
                <button class="btn btn-primary m-3 rounded-pill d-block" id="legend_btn"> <span id="arrow_legend">▲</span> Legend</button>
            </div>

        </div>


        <div class="col-md-2 d-flex flex-column">
            @foreach (var week in Model.Week?.Workbook?.Weeks?.OrderBy(w => w.WeekNumber) ?? Enumerable.Empty<Week>())
            {
                <div class="d-flex justify-content-center">
                    @if (Model.Week?.WeekNumber != week.WeekNumber) {
                        <a class="btn btn-primary mb-2 rounded-pill bg-secondary" asp-action="Week" asp-route-id="@week.WeekId">
                            Week @week.WeekNumber
                        </a>
                    }
                    else {
                        <a class="btn btn-secondary mb-2 rounded-pill" >
                            Week @week.WeekNumber
                        </a>
                    }

                </div>
            }
        </div>
    </div>


</div>
<script>
    
    //Data for the main table
    var weekTableBody = document.getElementById('weekTable').querySelector('tbody');
    var weekTableData = [];
    var isOrderingActive = false;
    var changeOrderDisabled = false;

    @foreach (var item in Model.ActivitiesList ?? new List<WeekActivities>())
    {
    <text>
        weekTableData.push({
            id: "@Html.Raw(item.WeekActivityId)",
            taskOrder : "@Html.Raw(item.TaskOrder)",
            staffResponsible: "@Html.Raw(item.TaskStaff)",
            title: "@Html.Raw(item.TaskTitle)",
            learningActivity: "@Html.Raw(item.Activities.ActivityName)",
            learningType: "@Html.Raw(item.LearningType.LearningTypeName)",
            time: "@Html.Raw(item.TaskTime.ToString(@"hh\:mm"))",
            status: "@Html.Raw(item.TasksStatus.StatusName)",
            activityLocation: "@Html.Raw(item.TaskLocation.LocationName)",
            approach: "@Html.Raw(item.TaskApproach.ApproachName)"
        });
    </text>
    }

    @if (!(Model.ActivitiesList?.Any() ?? false))
    {
    <text>
    weekTableData.push({
        id: "N/A",
        taskOrder : "N/A",
        staffResponsible: "N/A",
        title: "N/A",
        learningActivity: "N/A",
        learningType: "N/A",
        time: "N/A",
        status: "N/A",
        activityLocation:"N/A",
        approach: "N/A"
    });
    </text>
    }
    
    //Populating the heading for the table
    var tableHeading = document.getElementById('weekTableHeading')

    const columnIds = [
        "changeOrderTask", "changeOrderStaff", "changeOrderTitle",
        "changeOrderActivity", "changeOrderType", "changeOrderTime",
        "changeOrderStatus", "changeOrderLocation", "changeOrderApproach"
    ];

    const columnMappings = {
        "changeOrderTask": "taskOrder",
        "changeOrderStaff": "staffResponsible",
        "changeOrderTitle": "title",
        "changeOrderActivity": "learningActivity",
        "changeOrderType": "learningType",
        "changeOrderTime": "time",
        "changeOrderStatus": "status",
        "changeOrderLocation": "activityLocation",
        "changeOrderApproach": "approach"
    };

    const columns = {}; 

    columnIds.forEach(id => {
        const column = document.getElementById(id);
        if (column) {
            columns[id] = { element: column, ascending: true };
            column.addEventListener("click", () => sortColumn(id));
            column.style.cursor = "pointer";
        }
    });

    function sortColumn(columnId) {
        const key = columnMappings[columnId]; 
        const column = columns[columnId];

        Object.keys(columns).forEach(id => {
            if (id !== columnId) {
                columns[id].element.textContent = columns[id].element.textContent.replace(" ▼", " ▲");
                columns[id].ascending = true;
            }
        });

        if (column.ascending) {
            weekTableData.sort((a, b) => a[key].toString().localeCompare(b[key].toString(), undefined, { numeric: true }));
            column.element.textContent = column.element.textContent.replace(" ▲", " ▼");
        } else {
            weekTableData.sort((a, b) => b[key].toString().localeCompare(a[key].toString(), undefined, { numeric: true }));
            column.element.textContent = column.element.textContent.replace(" ▼", " ▲");
        }

        column.ascending = !column.ascending;
        renderTable(); 
    }
    
    
    //Populating the table from the data
    function renderTable() {
    
        weekTableBody.innerHTML = '';
        weekTableData.order
        weekTableData.forEach(function(rowData, index) {
            var row = document.createElement('tr');
            for (var key in rowData) {
                if (key !== "id") {
                    var cell = document.createElement('td');
                    cell.textContent = rowData[key];
                    row.appendChild(cell);
                }
            }

            if (isUserAuthorised) {

                tableHeading.colSpan = Object.keys(weekTableData[0]).length + 1;
                var actionCell = document.createElement('td');
                var upButton = document.createElement('button');
                upButton.textContent = "▲";
                upButton.disabled = index === 0;
                upButton.style.background = "none";
                upButton.style.border = "none";
                if (!upButton.disabled) {
                    upButton.style.color = "#3b82f6";
                }else{
                    upButton.style.color = "#003865";
                }
                
                upButton.id = `upButton-${index}`;

                upButton.addEventListener("mouseover", function() {
                    if (!upButton.disabled) {
                        upButton.style.color = "#003865";
                    }
                });
                upButton.addEventListener("mouseout", function() {
                    if (!upButton.disabled) {
                        upButton.style.color = "#3b82f6";
                    }else{
                        upButton.style.color = "#003865";
                    }
                });

                var downButton = document.createElement('button');
                downButton.textContent = "▼";
                downButton.style.background = "none";
                downButton.style.border = "none";
                downButton.disabled = index === weekTableData.length - 1;
                downButton.id = `downButton-${index}`;
                if (!downButton.disabled) {
                    downButton.style.color = "#3b82f6";
                }else{
                    downButton.style.color = "#003865";
                }
                

                if (isOrderingActive) {
                    upButton.style.display = "block";
                    downButton.style.display = "block";
                } else {
                    upButton.style.display = "none";
                    downButton.style.display = "none";
                }
            
                downButton.addEventListener("mouseover", function() {
                    if (!downButton.disabled) {
                        downButton.style.color = "#003865";
                    }
                });
                downButton.addEventListener("mouseout", function() {
                    if (!downButton.disabled) {
                        downButton.style.color = "#3b82f6";
                    }else{
                        downButton.style.color = "#003865";
                    }
                });

                upButton.onclick = function() {
                    moveRow(index, -1);
                    setTimeout(() => {
                        refocusArrows(index - 1, "up");
                    }, 0);
                };

                downButton.onclick = function() {
                    moveRow(index, 1);
                    setTimeout(() => {
                        refocusArrows(index + 1, "down");
                    }, 0);
                };

                actionCell.appendChild(upButton);
                actionCell.appendChild(downButton);
                actionCell.classList.add("d-flex", "flex-column","gap-4");
                actionCell.style.border = "none";
                row.appendChild(actionCell);

                var editCell = document.createElement('td');
                if(rowData.id !== "N/A"){
                    var editLink = document.createElement('a');
                    editLink.textContent = "Edit Activity";
                    editLink.href = `/Workbooks/EditActivity/${rowData.id}`;
                    editLink.className = "d-flex justify-content-center btn btn-primary";
                    editCell.appendChild(editLink);
                }else{
                    editCell.textContent = "N/A";
                    var changeOrderButton = document.getElementById("changeOrder");
                    changeOrderButton.className = "btn btn-secondary d-block";
                    changeOrderDisabled = true;
            }
            row.appendChild(editCell);
            
        }
        else {
                tableHeading.colSpan = Object.keys(weekTableData[0]).length - 1;
        }
            weekTableBody.appendChild(row);
        });
    }

    //Function to show changes to the order made by the user
    function moveRow(index, direction) {
        var newIndex = index + direction;
        var temp = weekTableData[index];
        weekTableData[index] = weekTableData[newIndex];
        weekTableData[newIndex] = temp;
        renderTable();
    }

    renderTable();
    if (isUserAuthorised) {
        var changeOrderButton = document.getElementById("changeOrder");
        var saveOrderButton = document.getElementById("saveOrder");
        
        if (!changeOrderDisabled){
            changeOrderButton.onclick = function() {
                weekTableData.sort((a, b) => a.taskOrder - b.taskOrder);
                renderTable();

                columnIds.forEach(id => {
                    const column = document.getElementById(id);
                    if (column) {
                        column.classList.add("d-none");
                        column.classList.remove("d-block");
                    }
                });
                
                isOrderingActive = true;
                saveOrderButton.className = "btn btn-success d-block";
                changeOrderButton.className = "btn btn-primary d-none";

                for (let i = 0; i < weekTableData.length; i++) {
                    let buttonD = document.getElementById(`downButton-` + i);
                    let buttonU = document.getElementById(`upButton-` + i);
                    if (buttonD && buttonU) {
                        buttonD.style.display = "block";
                        buttonU.style.display = "block";
                    }
                }
            };

            saveOrderButton.onclick = function() {
                isOrderingActive = false;
                changeOrderButton.className = "btn btn-primary d-block";
                saveOrderButton.className = "btn btn-success d-none";

                columnIds.forEach(id => {
                    const column = document.getElementById(id);
                    if (column) {
                        column.classList.add("d-block");
                        column.classList.remove("d-none");
                    }
                });

                for (let i = 0; i < weekTableData.length; i++) {
                    let buttonD = document.getElementById(`downButton-` + i);
                    let buttonU = document.getElementById(`upButton-` + i);
                    if (buttonD && buttonU) {
                        buttonD.style.display = "none";
                        buttonU.style.display = "none";
                    }
                }
            saveOrder();
        
            };
        }
    }


    //Stats table data 
    var statsData = [];
    @{
        double totalTime = Model.ActivitiesList?
            .Select(a => (double?)a.TaskTime.TotalMinutes)
            .Sum() ?? 0;
    }

    let hoursTotal = Math.floor(@totalTime/60);
    let minutesTotal = @totalTime%60;
   
    @{
        foreach (var type in learningTypes ?? Enumerable.Empty<LearningType>())
        {
            var time = Model.ActivitiesList?
                .Where(a => a.LearningType.LearningTypeName == type.LearningTypeName)
                .Select(a => (double?)a.TaskTime.TotalMinutes)
                .Sum() ?? 0; 
            
                <text>
                    statsData.push({
                        label: "@Html.Raw(type.LearningTypeName)", 
                        time: @Html.Raw(time),
                        color: "@Html.Raw(type.LearningTypeColour)",
                        textColor: "@Html.Raw(type.LearningTypeTextColour)"
                    });
                </text>
        }
    }

    legendData = []
    @{
        foreach (var type in learningTypes ?? Enumerable.Empty<LearningType>())
        {
            <text>
                    legendData.push({
                    label: "@Html.Raw(type.LearningTypeName)",
                    color: "@Html.Raw(type.LearningTypeColour)",
                    textColor: "@Html.Raw(type.LearningTypeTextColour)",
                    description: "@Html.Raw(type.LearningTypeDescription)"
                });
            </text>
        }
    }

    var statsLearningActivityTable = document.getElementById("statsLearningActivityTable");
    var statsTasksTable = document.getElementById("statsTasksTable");
    statsLearningActivityTable.innerHTML = "";
    statsTasksTable.innerHTML = "";

    var rowLAHeading = document.createElement("tr");
    rowLAHeading.innerHTML = `
                <td class="text-white bg-stats-table p-2">
                    Learning Activity
                </td>
                <td class=" text-white bg-stats-table p-2">
                    Allocation
                </td>
            `;
    statsLearningActivityTable.appendChild(rowLAHeading);
    
    statsData.forEach(item => {
        var row = document.createElement("tr");
        let hours = Math.floor(item.time/60);
        let minutes = item.time%60;
        row.innerHTML = `
                <td style="background-color: ${item.color}; color: ${item.textColor};" class="p-2">
                    ${item.label}
                    
                </td>
                <td class="p-2">${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}</td>
            `;
        statsLearningActivityTable.appendChild(row);
    });
    var rowLATotal = document.createElement("tr");
    rowLATotal.innerHTML = `<td class="p-2"> Total Time </td> 
                    <td class="p-2 table-total">${hoursTotal.toString().padStart(2, '0')}:${minutesTotal.toString().padStart(2, '0')}</td>`;
    statsLearningActivityTable.appendChild(rowLATotal);



    var locationData = [];
    @{
        var locationCounts = new Dictionary<string, int>();

        foreach (var item in Model.ActivitiesList ?? new List<WeekActivities>())
        {
        var location = item?.TaskLocation.LocationName ?? "Unknown";
        locationCounts[location] = locationCounts.ContainsKey(location) ? locationCounts[location] + 1 : 1;
        }

  
        foreach (var item in Model.LocationList ?? new List<TaskLocation>())
        {
        var location = item?.LocationName ?? "Unknown";
        var locationColour = item?.LocationColour ?? "#FFFFFF";
        var locationTextColour = item?.LocationTextColour ?? "#000000";
        var count = locationCounts.ContainsKey(location) ? locationCounts[location] : 0;

        <text>
        locationData.push({
            location: "@Html.Raw(location)",
            color: "@Html.Raw(locationColour)",
            textColor: "@Html.Raw(locationTextColour)",
            count: @count
        });
        </text>
        }
    }

    var statusData = [];
    @{
    var statusCounts = new Dictionary<string, int>();

    foreach (var item in Model.ActivitiesList ?? new List<WeekActivities>())
    {
    var status = item?.TasksStatus.StatusName ?? "Unknown";
    statusCounts[status] = statusCounts.ContainsKey(status) ? statusCounts[status] + 1 : 1;
    }


    foreach (var item in Model.StatusList ?? new List<TaskProgressStatus>())
    {
    var status = item?.StatusName ?? "Unknown";
    var statusColour = item?.StatusColour ?? "#FFFFFF";
    var statusTextColour = item?.StatusTextColour ?? "#000000";
    var count = statusCounts.ContainsKey(status) ? statusCounts[status] : 0;

    <text>
    statusData.push({
        status: "@Html.Raw(status)",
        color: "@Html.Raw(statusColour)",
        textColor: "@Html.Raw(statusTextColour)",
        count: @count
    });
    </text>
    }
    }

    var approachData = [];
    @{
    var approachCounts = new Dictionary<string, int>();

    foreach (var item in Model.ActivitiesList ?? new List<WeekActivities>())
    {
    var approach = item?.TaskApproach.ApproachName ?? "Unknown";
    approachCounts[approach] = approachCounts.ContainsKey(approach) ? approachCounts[approach] + 1 : 1;
    }


    foreach (var item in Model.ApproachList ?? new List<TaskApproach>())
    {
    var approach = item?.ApproachName ?? "Unknown";
    var approachColour = item?.ApproachColour ?? "#FFFFFF";
    var approachTextColour = item?.ApproachTextColour ?? "#000000";
    var count = approachCounts.ContainsKey(approach) ? approachCounts[approach] : 0;

    <text>
    approachData.push({
        approach: "@Html.Raw(approach)",
        color: "@Html.Raw(approachColour)",
        textColor: "@Html.Raw(approachTextColour)",
        count: @count
    });
    </text>
    }
    }

    var totalTasks = 0;

    var rowTaskStatusHeading = document.createElement("tr");
    rowTaskStatusHeading.innerHTML = `
                <td class="text-white bg-stats-table p-2">
                    Status
                </td>
                <td class=" text-white bg-stats-table p-2">
                    Tasks
                </td>
            `;
            
    statsTasksTable.appendChild(rowTaskStatusHeading);

    statusData.forEach(item => {

        var row = document.createElement("tr");
        row.innerHTML = `<td style="background-color: ${item.color}; color: ${item.textColor};" class="p-2">${item.status}</td> 
                     <td class="p-2">${item.count}</td>`;
        statsTasksTable.appendChild(row);
        totalTasks += item.count;
    });


    var rowTaskLocationHeading = document.createElement("tr");
    rowTaskLocationHeading.innerHTML = `
    <td class="text-white bg-stats-table p-2">
        Activity Location
    </td>
    <td class="text-white bg-stats-table p-2">
        Total
    </td>
`;
    statsTasksTable.appendChild(rowTaskLocationHeading);

    locationData.forEach(item => {

        var row = document.createElement("tr");
        row.innerHTML = `<td style="background-color: ${item.color}; color: ${item.textColor};" class="p-2">${item.location}</td> 
                     <td class="p-2">${item.count}</td>`;
        statsTasksTable.appendChild(row);
    });

    var rowTaskApproachHeading = document.createElement("tr");
    rowTaskApproachHeading.innerHTML = `
                <td class="text-white bg-stats-table p-2">
                    Activity Approach
                </td>
                <td class=" text-white bg-stats-table p-2">
                    Total
                </td>
            `;
    statsTasksTable.appendChild(rowTaskApproachHeading);

    approachData.forEach(item => {
        var row = document.createElement("tr");
        row.innerHTML = `<td style="background-color: ${item.color}; color: ${item.textColor};" class="p-2">${item.approach}</td> 
                    <td class="p-2">${item.count}</td>`;
        statsTasksTable.appendChild(row);
    });

    var rowTaskTotal = document.createElement("tr");
    rowTaskTotal.innerHTML = `<td class="p-2">Total Tasks</td> 
                     <td class="p-2 table-total">${totalTasks}</td>`;
    statsTasksTable.appendChild(rowTaskTotal);

    var legendTable = document.getElementById("legendTable");
    legendTable.innerHTML = "";

    legendData.forEach(item => {
        var row = document.createElement("tr");

        row.innerHTML = `
                <td style="background-color: ${item.color}; color: ${item.textColor};" class="p-2">
                    ${item.label}
                    
                </td>
                <td class="p-2">${item.description}<td>
            `;

        legendTable.appendChild(row);
    });

    //button toggle functions
    document.getElementById("lt_table_hide").addEventListener("click", toggleStatsTable);
    document.getElementById("lt_chart_hide").addEventListener("click", togglePieChart);
    document.getElementById("legend_btn").addEventListener("click", toggleLegend);

    function togglePieChart() {
        const chart = document.getElementById("lt_chart");
        const key = document.getElementById("lt_chart_key");
        const arrow = document.getElementById("arrow_chart");
        chart.classList.toggle("d-none")
        chart.classList.toggle("d-block")
        key.classList.toggle("d-none")
        key.classList.toggle("d-block")

        if (chart.classList.contains("d-none")) {
            arrow.innerHTML = "▲";
            
        } else {
            arrow.innerHTML = "▼";
            refocusButton("lt_chart");
        }
    }
    
    function toggleLegend() {
        const chart = document.getElementById("lt_chart");
        const table = document.getElementById("statsTable");
        const key = document.getElementById("lt_chart_key");
        const legend = document.getElementById("legend");
        const arrow = document.getElementById("arrow_legend");
        const buttonChart = document.getElementById("lt_chart_hide");
        const buttonTable = document.getElementById("lt_table_hide");

        legend.classList.toggle("d-none")
        legend.classList.toggle("d-block")
        chart.className = "d-none";
        key.className = "d-none";
        table.className = "table table-bordered text-center position-sticky d-none";
        buttonChart.className = "btn btn-primary m-3 rounded-pill d-none";
        buttonTable.className = "btn btn-primary m-3 rounded-pill d-none";

        if (legend.classList.contains("d-block")) {
            arrow.innerHTML = "▼";
            refocusButton("legend");

        } else {
            arrow.innerHTML = "▲";
            buttonChart.className = "btn btn-primary m-3 rounded-pill d-block";
            buttonTable.className = "btn btn-primary m-3 rounded-pill d-block";
        }
    }

    function toggleStatsTable() {
        const table = document.getElementById("statsTable");
        const arrow = document.getElementById("arrow_stats");
        table.classList.toggle("d-none")
        table.classList.toggle("d-block")

        if (table.classList.contains("d-none")) {
            arrow.innerHTML = "▲";
            
        } else {
            arrow.innerHTML = "▼";
            refocusButton("statsTable");
        }
    }
    
    
    
    //function to call controller to save new taskOrder to the DB
    function saveOrder() {
        var activities = {};


        for (let i = 0; i < weekTableData.length; i++) {
            activities[weekTableData[i].id] = i+1;
        }

        var workbookId = @Model.Week!.Workbook!.WorkbookId;
        activities["workbookId"] = workbookId;

        fetch('/Workbooks/ChangeActivityOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(activities),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
        setTimeout(() => {
            location.reload();
        }, 1000);
    }
    
    //functions to focus the screen on the related elements
    function refocusArrows(newIndex, direction) {

        if (direction === "up") {
            let upButton = document.getElementById(`upButton-${newIndex}`);
            upButton.focus();
            upButton.scrollIntoView({ behavior: "smooth", block: "center" });
        } else if (direction === "down") {
            let downButton = document.getElementById(`downButton-${newIndex}`);
            downButton.focus();
            downButton.scrollIntoView({ behavior: "smooth", block: "center" });
        }
    }

    function refocusButton(id) {

        let content = document.getElementById(`${id}`);
        content.focus();
        content.scrollIntoView({ behavior: "smooth", block: "center" });
    }

    // Pie chart vector
    var pieMargin = 20;
    var pieWidth = Math.max(window.innerWidth * 0.2, 230);
    var pieHeight = Math.max(window.innerWidth * 0.2, 230);
    var pieRadius = Math.max(pieWidth, pieHeight) / 2 - pieMargin;

    var svg = d3.select("#lt_chart")
        .append("svg")
        .attr("width", pieWidth)
        .attr("height", pieHeight)
        .append("g")
        .attr("transform", "translate(" + pieWidth / 2 + "," + pieHeight / 2 + ")");

    var color = d3.scaleOrdinal()
        .domain(statsData.map(d => d.label))
        .range(statsData.map(d => d.color));

    var pie = d3.pie()
        .value(function(d) { return d.time; });

    var arc = d3.arc()
        .innerRadius(0)
        .outerRadius(pieRadius);

    // Draw Pie Slices
    svg.selectAll('path')
        .data(pie(statsData))
        .enter()
        .append('path')
        .attr('d', arc)
        .attr('fill', function(d) { return color(d.data.label); })
        .attr("stroke", "black")
        .style("stroke-width", "0px") 
        .style("opacity", 1)
        .on("mouseover", function (event, d) {
            displayDetails(d.data);
        })
        .on("mouseout", function () {
            hideDetails();
        });

    const key = d3.select("#lt_chart_key")
        .append("div")
        .attr("id", "key")
        .style("display", "flex")
        .style("flex-direction", "column")
        .style("margin-left", "20px")
        .style("margin-top", "20px");

    key.selectAll("div")
        .data(statsData)
        .enter()
        .append("div")
        .style("display", "flex")
        .style("align-items", "center")
        .style("margin-bottom", "5px")
        .html(function(d) {
            return `
                <div style="width: 12px; height: 12px; background-color: ${d.color}; 
                    margin-right: 8px; border: 1px solid black;"></div>
                ${d.label}
            `;
    });

    window.addEventListener("resize", function () {
        pieWidth = Math.max(window.innerWidth * 0.2, 230);
        pieHeight = Math.max(window.innerWidth * 0.2, 230);
        pieRadius = Math.max(pieWidth, pieHeight) / 2 - pieMargin;

        d3.select("svg")
            .attr("width", pieWidth)
            .attr("height", pieHeight);

        svg.attr("transform", "translate(" + pieWidth / 2 + "," + pieHeight / 2 + ")");
        arc.outerRadius(pieRadius);
        svg.selectAll("path").attr("d", arc);
    });
    
    //percentage of time displayed when the user hovers over the pie chart
    function displayDetails(d) {
        var percentage = @Html.Raw(totalTime) > 0 ? ((d.time / @Html.Raw(totalTime)) * 100).toFixed(2) : 0;
        let detailsDiv = d3.select("#lt_chart_details");
        detailsDiv.html(`<strong>${d.label}</strong>: (${percentage}%)`);
    }

    function hideDetails() {
        let detailsDiv = d3.select("#lt_chart_details");
        detailsDiv.html('');
    }

</script>