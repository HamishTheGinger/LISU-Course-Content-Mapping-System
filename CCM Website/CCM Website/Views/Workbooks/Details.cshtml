@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CCM_Website.Models.Workbook
@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = $"{@Model?.CourseCode ?? @Model?.CourseName ?? "N/A"} - Overview";
    ViewData["LearningPlatform"] = $"{@Model?.LearningPlatform.PlatformName}";
    var learningTypes = ViewData["LearningTypes"] as List<LearningType>;
    var graduateAttributes = ViewData["GraduateAttributes"] as List<GraduateAttribute>;
}

<nav aria-label="breadcrumb">
        <ol class="breadcrumb row">
            <div class="col-md-10 d-flex align-items-center">
                <li><button class="btn btn-primary me-3" onclick="history.back();">Back</button></li>
                <li class="breadcrumb-item ms-2"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
                <li class="breadcrumb-item"><a asp-controller="Workbooks" asp-action="Index">Workbooks</a></li>
                <li class="breadcrumb-item active" aria-current="page">Workbook Details</li>
            </div>
            <div class="col-md-2 d-flex justify-content-center">
                <button id="shareBtn" class="btn btn-success m-2">Share Workbook</button>
            </div>
        </ol>
        <hr />
</nav>

<div class="container-fluid">
    <div class="row my-3 align-items-start">
        <div class="col-md-10 mb-3">
            <h1 class="text-wrap">@Html.DisplayFor(model => model.CourseName)</h1>
            <h4 class="text-wrap">Course Leads: @Html.DisplayFor(model => model.CourseLead)</h4>
        </div>
        @if ((await AuthorizationService.AuthorizeAsync(User, Model, "CanAccessResource")).Succeeded)
        {            
            <div class="col-md-2 d-flex justify-content-center">
                <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model?.WorkbookId">Edit Overview</a>
            </div>
        }
    </div>


    <div class="container-fluid">
        <div class="row">
            <div class="col-md-2 left-column d-flex flex-column justify-content-center align-items-center">
                <br />
                <br />
                <button class="btn btn-primary m-3 rounded-pill active" id="time_breakdown_btn"> <span id="arrow_time_breakdown">◀</span>Student Notional Working Hours</button>
                <button class="btn btn-primary m-3 rounded-pill" id="time_breakdown_graph_btn"> <span id="arrow_time_breakdown_graph">▶</span>Time Breakdown Graph</button>
                <button class="btn btn-primary m-3 rounded-pill" id="graduate_attributes_btn"> <span id="arrow_graduate_attributes">▶</span>Graduate Attributes Table</button>
            </div>
            
            <div class="col-md-8 center-column d-flex align-items-center justify-content-center">
                <div id="graph-container" class="overflow-auto flex-column">

                    <div id="time-breakdown" class="show">
                        <table class="table table-bordered table-responsive w-auto">
                            <thead>
                                <tr class="bg-secondary text-center">
                                    <th class="text-white">Week</th>
                                    @foreach (var type in learningTypes ?? Enumerable.Empty<LearningType>())
                                    {
                                        <th id="@type.LearningTypeName">@type.LearningTypeName</th>
                                    }
                                    <th class="text-white">Total Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var week in Model!.Weeks ?? Enumerable.Empty<Week>())
                                {
                                    var weekData = ViewBag.TimeBreakdown != null && ViewBag.TimeBreakdown.ContainsKey(week.WeekNumber)
                                    ? ViewBag.TimeBreakdown[week.WeekNumber] as Dictionary<string, TimeSpan>
                                    : new Dictionary<string, TimeSpan>();

                                    <tr>
                                        <td class="text-center">@week.WeekNumber</td>
                                        @foreach (var type in learningTypes ?? Enumerable.Empty<LearningType>())
                                        {
                                            var timeValue = weekData!.ContainsKey(type.LearningTypeName) ? weekData[type.LearningTypeName] : TimeSpan.Zero;
                                            <td class="text-center">@timeValue.ToString(@"hh\:mm")</td>
                                        }
                                        <td class="text-center fw-bold">
                                            @{
                                                var totalTime = weekData?.Values.Aggregate(TimeSpan.Zero, (sum, next) => sum + next) ?? TimeSpan.Zero;
                                            }
                                            @totalTime.ToString(@"hh\:mm")
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div id="time-breakdown-graph" class="d-none">
                        <div class="d-flex">
                            <div id="bar_chart_legend"></div>
                            <div id="bar_chart_details"></div>
                        </div>
                    </div>
                    
                    <div id="grad-attributes" class="d-none">
                        <table class="table table-bordered table-responsive text-center">
                            <thead>
                            <tr class="bg-secondary text-white">
                                <th>Graduate Attributes</th>
                                <th>Total Attributes</th>
                                @foreach (var week in Model.Weeks ?? Enumerable.Empty<Week>())
                                {
                                    <th>
                                        W @week.WeekNumber
                                        <br />
                                        @if ((await AuthorizationService.AuthorizeAsync(User, Model, "CanAccessResource")).Succeeded)
                                        {
                                            <a asp-action="AssignAttributes" asp-controller="Workbooks"
                                               asp-route-weekId="@week.WeekId" class="btn btn-primary btn-sm rounded-pill m-1 text-white bg-grad-attributes-table">
                                                Assign
                                            </a>
                                        }
                                    </th>
                                }
                            </tr>
                            </thead>
                            <tbody>
                            @{
                            // get all graduate attributes
                            var allGraduateAttributes = (graduateAttributes ?? Enumerable.Empty<GraduateAttribute>())
                            .Select(ga => ga.AttributeName)
                            .Union((Model.Weeks ?? Enumerable.Empty<Week>())
                            .Where(w => w.WeekGraduateAttributes != null)
                            .SelectMany(w => w.WeekGraduateAttributes!.Select(wga => wga.GraduateAttribute.AttributeName)))
                            .Distinct()
                            .ToList();
                            }

                            @foreach (var attributeName in allGraduateAttributes)
                            {
                            <tr>
                                <td class="bg-grad-attributes-table text-white">@attributeName</td>
                                
                                <td>
                                    @{
                                    var totalAttributeCount = (Model.Weeks ?? Enumerable.Empty<Week>())
                                    .Sum(week => week.WeekGraduateAttributes?.Count(wga => wga.GraduateAttribute.AttributeName == attributeName) ?? 0);
                                    }
                                    @totalAttributeCount
                                </td>
                                
                                @foreach (var week in Model.Weeks ?? Enumerable.Empty<Week>())
                                {
                                var countForWeek = week.WeekGraduateAttributes?
                                .Count(wga => wga.GraduateAttribute.AttributeName == attributeName) ?? 0;

                                <td>@countForWeek</td>
                                }
                            </tr>
                            }
                            </tbody>
                        </table>
                    </div>


                    <div id="legend" class="d-none">
                        <table class="table table-bordered table-responsive" id="legendTable">
                            <thead>
                            <tr><th>Legend</th></tr>
                            </thead>
                            <tbody>

                            </tbody>
                        </table>

                    </div>
                    
                </div>
            </div>
            
            <div class="col-md-2 right-column d-flex flex-column align-items-center">
                @foreach (var week in @Model.Weeks ?? Enumerable.Empty<Week>())
                {
                    <a class="btn btn-primary mb-2 rounded-pill" asp-action="Week" asp-route-id="@week.WeekId">Week @week.WeekNumber</a>
                }
            </div>

            <div class="text-center d-flex justify-content-center">
                <button class="btn btn-primary m-3 rounded-pill" id="legend_btn"> <span id="arrow_legend">▲</span>Legend</button>
            </div>

        </div>
    </div>
</div>


<script>    
    var colourData = [];
    var activities=[];
    
    // ---LEGEND---
    legendData = []
    @{
    foreach (var type in learningTypes ?? Enumerable.Empty<LearningType>())
    {
    <text>
    legendData.push({
        label: "@Html.Raw(type.LearningTypeName)",
        color: "@Html.Raw(type.LearningTypeColour)",
        textColor: "@Html.Raw(type.LearningTypeTextColour)",
        description: "@Html.Raw(type.LearningTypeDescription)"
    });
    </text>
    }
    }
    
    var legendTable = document.getElementById("legendTable");
    legendTable.innerHTML = "";

    legendData.forEach(item => {
        var row = document.createElement("tr");

        row.innerHTML = `
                <td style="background-color: ${item.color}; color: ${item.textColor};" class="p-2">
                    ${item.label}
                    
                </td>
                <td class="p-2">${item.description}<td>
            `;

        legendTable.appendChild(row);
    });

    // ---LEARNING TYPE TABLE---
    @foreach (var type in learningTypes ?? Enumerable.Empty<LearningType>())
    {
        
        <text>
    activities.push("@type.LearningTypeName");
    colourData.push({
        label: "@type.LearningTypeName",
        color: "@type.LearningTypeColour",
        textColor: "@type.LearningTypeTextColour",
    });
    
        
        </text>
    }


    // ---SELECTION BUTTONS---
    function refocusButton(id) {

        let content = document.getElementById(`${id}`);
        content.focus();
        content.scrollIntoView({ behavior: "smooth", block: "center" });
    }
    
    function toggleSection(buttonId, sectionId, arrowId) {
        const button = document.getElementById(buttonId);
        const section = document.getElementById(sectionId);
        const arrow = document.getElementById(arrowId);

        colourData.forEach(item => {
            const colourCell = document.getElementById(item.label);
            if (colourCell) {
                colourCell.style.backgroundColor = item.color;
                colourCell.style.color = item.textColor;
            }
        });

        button.addEventListener("click", function () {
            if (section.classList.contains("d-none")) {
                section.classList.add("show");
                section.classList.remove("d-none");
                arrow.textContent = "◀"; 
                refocusButton(sectionId);
                button.classList.add("active");
                
            } else {
                section.classList.remove("show");
                section.classList.add("d-none");
                arrow.textContent = "▶";
                button.classList.remove("active");
            }
        });
    }

    function toggleLegendSection(buttonId, sectionId, arrowId) {
        const button = document.getElementById(buttonId);
        const section = document.getElementById(sectionId);
        const arrow = document.getElementById(arrowId);

        button.addEventListener("click", function () {
            if (section.classList.contains("d-none")) {
                section.classList.add("show");
                section.classList.remove("d-none");
                arrow.textContent = "▼";
                refocusButton(sectionId);
                button.classList.add("active");

                colourData.forEach(item => {
                    const legendCell = document.getElementById(item.label + "_legend");
                    if (legendCell) {
                        legendCell.style.backgroundColor = item.color;
                        legendCell.style.color = item.textColor;
                    }
                });

            } else {
                section.classList.remove("show");
                section.classList.add("d-none");
                arrow.textContent = "▲";
                button.classList.remove("active");
            }
        });

        
    }

    toggleSection("time_breakdown_btn", "time-breakdown", "arrow_time_breakdown");
    toggleSection("time_breakdown_graph_btn", "time-breakdown-graph", "arrow_time_breakdown_graph");
    toggleSection("graduate_attributes_btn", "grad-attributes", "arrow_graduate_attributes");
    toggleLegendSection("legend_btn", "legend", "arrow_legend");




    // ---TIME BREAKDOWN GRAPH---
    const data = [
        @foreach (var week in Model.Weeks ?? Enumerable.Empty<Week>()){
            var weekData = ViewBag.TimeBreakdown[week.WeekNumber] as Dictionary<string, TimeSpan>;

            if (weekData != null) {
                @: {
                @:week: @week.WeekNumber,
                @foreach (var type in ViewBag.LearningTypes ?? Enumerable.Empty<LearningType>()){
                    @:@type.LearningTypeName.Replace(" ", ""): @weekData[type.LearningTypeName].TotalHours.ToString("0.##"),
                }
                @: },
            }
        }
    ];


    const stackedData = d3.stack().keys(activities)(data);

    const colorScale = d3.scaleOrdinal()
        .domain(activities)
        .range(colourData.map(d => d.color));

    const svg = d3.select("#time-breakdown-graph")
        .append("svg")
        .attr("width", 800)
        .attr("height", 400);

    const width = 800;
    const height = 400;
    const margin = { top: 20, right: 30, bottom: 40, left: 50 };

    const xScale = d3.scaleBand()
        .domain(data.map(d => d.week))
        .range([margin.left, width - margin.right])
        .padding(0.1);

    const yScale = d3.scaleLinear()
        .domain([0, d3.max(stackedData, layer => d3.max(layer, d => d[1] || 0))]) 
        .nice()
        .range([height - margin.bottom, margin.top]);

    const hoverValues = d3.select("#hoverValues");

    svg
        .selectAll("g")
        .data(stackedData)
        .join("g")
        .attr("fill", d => colorScale(d.key))
        .selectAll("rect")
        .data(d => d)
        .join("rect")
        .attr("x", d => xScale(d.data.week))
        .attr("y", d => yScale(d[1]))
        .attr("height", d => yScale(d[0]) - yScale(d[1]))
        .attr("width", xScale.bandwidth())
        .on("mouseover", function (event, d) {
            let activityType = d3.select(this.parentNode).datum().key;
            displayDetails(d.data, activityType);
        })
        .on("mouseout", function () {
            hideDetails();
        });

    svg
        .append("g")
        .attr("transform", `translate(0, ${height - margin.bottom})`)
        .call(d3.axisBottom(xScale));

    svg
        .append("g")
        .attr("transform", `translate(${margin.left}, 0)`)
        .call(d3.axisLeft(yScale).tickFormat(d => {
            const hours = Math.floor(d);
            const minutes = Math.round((d - hours) * 60);
            return `${hours}:${minutes.toString().padStart(2, "0")}`;
        }));

    //legend for graph
    const barChartLegend = d3.select("#bar_chart_legend")
        .style("display", "flex")
        .style("flex-direction", "column")
        .style("margin-left", "20px")
        .style("margin-top", "20px");

    barChartLegend.selectAll("div")
        .data(activities)
        .enter()
        .append("div")
        .style("display", "flex")
        .style("align-items", "center")
        .style("margin-bottom", "5px")
        .html(activity => {

            console.log("Legend Activity:", activity, "Color:", colorScale(activity));
            return `
                <div style="width: 12px; height: 12px; background-color: ${colorScale(activity)}; margin-right: 8px; border: 1px solid black;"></div>
                ${activity}
            `;
        });

    function displayDetails(d, activityType) {
        let detailsDiv = d3.select("#bar_chart_details");

        let totalHours = d[activityType];

        let hours = Math.floor(totalHours);
        let minutes = Math.round((totalHours - hours) * 60);

        detailsDiv.html(`<strong>Week ${d.week}</strong><br>${activityType}: <strong>${hours}:${minutes.toString().padStart(2, "0")}</strong>`);

        detailsDiv.style("display", "block");
    }

    function hideDetails() {
        d3.select("#bar_chart_details").style("display", "none");
    }

    // ---SHARE BUTTON---
    document.getElementById("shareBtn").addEventListener("click", function () {
        if (navigator.share) {
            navigator.share({
                title: document.title,
                url: window.location.href
            }).catch((error) => console.log('Sharing failed:', error));
        } else {
            alert("Your browser does not support the Web Share API.");
        }
    });
</script>


