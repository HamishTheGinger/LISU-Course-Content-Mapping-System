@model X.PagedList.IPagedList<CCM_Website.Models.Workbook>
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "My Workbooks";
}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li><button class="btn btn-primary me-3" onclick="history.back();">Back</button></li>
        <div class="d-flex m-2">
            <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Workbooks</li>
        </div>
    </ol>
    <hr/>
</nav>

<div class="row my-3">
    <div class="col d-flex justify-content-between align-items-center">
        @using (Html.BeginForm("Index", "Workbooks", FormMethod.Get))
        {
            <div class="input-group">
                @Html.TextBox("searchString", ViewData["SearchString"] as string, new { @class = "form-control", placeholder = "Search workbook name..." })
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        }
        
        <a class="btn btn-success"
           asp-action="Create">Create New Workbook
        </a>
    </div>
</div>


<table class="table table-responsive">
    <thead>
    <tr>
        <th>
            Course Name
        </th>
        <th>
            Course Code
        </th>
        <th>
            Course Lead
        </th>
        <th>
            University Area
        </th>
        <th>
            Pip Reference
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CourseName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CourseCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CourseLead)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UniversityArea.AreaName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PipReference)
            </td>
            <td>
                <div class="d-flex gap-2">
                    <a class="btn btn-secondary flex-fill" asp-action="Details" asp-route-id="@item.WorkbookId">View Workbook</a>
                    <a class="btn btn-primary flex-fill" asp-action="Edit" asp-route-id="@item.WorkbookId">Edit Workbook</a>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>
@if (!Model.Any())
{
    <div>
        <p>No workbooks found</p>
    </div>  
}


@Html.PagedListPager(Model,
page => Url.Action("Index", new { page, searchString = ViewData["SearchString"] }),
new PagedListRenderOptions
{
MaximumPageNumbersToDisplay = 3,
DisplayLinkToFirstPage = (Model.PageNumber <= 2) ? PagedListDisplayMode.Never : PagedListDisplayMode.Always,
DisplayLinkToLastPage = (Model.PageNumber >= Model.PageCount - 1) ? PagedListDisplayMode.Never : PagedListDisplayMode.Always,
DisplayLinkToPreviousPage = PagedListDisplayMode.Never,
DisplayLinkToNextPage = PagedListDisplayMode.Never,
DisplayEllipsesWhenNotShowingAllPageNumbers = true,
UlElementClasses = new[] { "pagination" },
LiElementClasses = new[] { "page-item" },
PageClasses = new[] { "page-link" }
}
)
